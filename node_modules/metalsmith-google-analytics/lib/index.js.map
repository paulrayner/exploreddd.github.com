{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;;;kBAoBe,UAAS,UAAU,EAA+B;mEAAJ,EAAE;;8BAAzB,WAAW;MAAX,WAAW,oCAAG,IAAI;;AACtD,cAAY,CAAC,UAAU,CAAC,CAAA;AACxB,SAAO,8BAAK,UAAU,IAAI,EAAE,QAAQ,EAAE;AACpC,QAAG,cAAc,CAAC,QAAQ,CAAC,EACzB,IAAI,CAAC,QAAQ,GAAG,kBAAkB,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,UAAU,EAAV,UAAU,EAAE,WAAW,EAAX,WAAW,EAAE,QAAQ,EAAR,QAAQ,EAAC,CAAC,CAAA;GAC1F,CAAC,CAAA;CACH;;;;;;;;;;;;;;AAtBM,IAAM,kBAAkB,WAAlB,kBAAkB,GAAG,SAArB,kBAAkB,CAAI,MAAM,EAAE,OAAO,EAAK;AACnD,MAAM,eAAe,GAAG,yBAAS,OAAO,CAAC,UAAU,EAAE,OAAO,CAAC,WAAW,CAAC,CAAA;AACzE,MAAM,KAAK,GAAa,YAJN,qBAAqB,EAIO,MAAM,EAAE,SAAS,CAAC,CAAA;AAChE,MAAG,KAAK,KAAK,CAAC,CAAC,EACb,MAAM,KAAK,gDAA6C,OAAO,CAAC,QAAQ,CAAG,CAAA;;qBACtD,YAPlB,WAAW,EAOmB,MAAM,EAAE,KAAK,CAAC;;;;MAAzC,KAAK;MAAE,GAAG;;AAClB,SAAO,YARkC,aAAa,EAQjC,KAAK,EAAE,eAAe,EAAE,GAAG,CAAC,CAAA;CACpD,CAAA;;AAED,IAAM,YAAY,GAAG,SAAf,YAAY,CAAG,UAAU,EAAI;AACjC,MAAG,OAAO,UAAU,KAAK,WAAW,IAAI,UAAU,KAAK,IAAI,EACzD,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAA;CACnE,CAAA;;AAEM,IAAM,cAAc,WAAd,cAAc,GAAG,SAAjB,cAAc,CAAG,QAAQ;SAAI,IAAI,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC;CAAA,CAAA","file":"index.js","sourcesContent":["import each                                                  from 'metalsmith-each'\nimport template                                              from './templates'\nimport { splitBuffer, bufferFindStringIndex, concatBuffers } from './buffer'\n\nexport const addGoogleAnalytics = (buffer, options) => {\n    const googleAnalytics = template(options.propertyId, options.asyncScript)\n    const index           = bufferFindStringIndex(buffer, '</head>')\n    if(index === -1)\n      throw Error(`html file dosn't have an head end tag in ${options.filename}`)\n    const [ start, end ] = splitBuffer(buffer, index)\n    return concatBuffers(start, googleAnalytics, end)\n}\n\nconst validateArgs = propertyId => {\n  if(typeof propertyId === 'undefiend' || propertyId === null)\n    throw new Error('google analytics: please provide a propertyId')\n}\n\nexport const hasHtmlPostfix = filename => new RegExp(\"\\.html$\").test(filename)\n\nexport default function(propertyId, { asyncScript = true } = {}) {\n  validateArgs(propertyId)\n  return each(function (file, filename) {\n    if(hasHtmlPostfix(filename))\n      file.contents = addGoogleAnalytics(file.contents, { propertyId, asyncScript, filename})\n  })\n}\n"],"sourceRoot":"/source/"}
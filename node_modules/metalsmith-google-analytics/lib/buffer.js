"use strict";

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; })();

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var splitBuffer = exports.splitBuffer = function splitBuffer(buffer, index) {
  var start = buffer.slice(0, index);
  var end = buffer.slice(index);
  return [start, end];
};

var buffersLength = exports.buffersLength = function buffersLength() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return [].slice.call(arguments).reduce(function (a, b) {
    return a + b.length;
  }, 0);
};

// dosn't work if the firs char of str is multiple times in the query
var bufferFindStringIndex = exports.bufferFindStringIndex = function bufferFindStringIndex(buffer, str) {
  var query = new Buffer(str);
  var queryBuffer = new Buffer(query.byteLength).fill(0);
  var count = 0;
  var index = -1;

  var isFirstQueryLetter = function isFirstQueryLetter(c) {
    return c === query[0];
  };
  var shouldBuffer = function shouldBuffer(c) {
    return !isFirstQueryLetter(c) && !!queryBuffer[0];
  };
  var isQueryBufferFull = function isQueryBufferFull() {
    return count == query.length;
  };
  var matchQuery = function matchQuery() {
    return queryBuffer.equals(query);
  };
  var resetQueryBuffer = function resetQueryBuffer() {
    count = 0;
    queryBuffer = new Buffer(query.byteLength).fill(0);
  };
  var calcIndex = function calcIndex(i) {
    return i - query.length + 1;
  };

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = buffer.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var _step$value = _slicedToArray(_step.value, 2);

      var i = _step$value[0];
      var c = _step$value[1];

      // buffering
      if (isFirstQueryLetter(c)) {
        queryBuffer.writeUInt32LE(c, 0);
        ++count;
      } else if (shouldBuffer(c)) {
        queryBuffer.writeUInt32LE(c, count, true);
        ++count;
      }
      if (isQueryBufferFull()) {
        if (matchQuery()) {
          index = calcIndex(i);
          break;
        }
        resetQueryBuffer();
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return index;
};

var concatBuffers = exports.concatBuffers = function concatBuffers() {
  var args = Array.prototype.slice.call(arguments);
  return Buffer.concat(args, buffersLength.apply(undefined, _toConsumableArray(args)));
};
//# sourceMappingURL=buffer.js.map

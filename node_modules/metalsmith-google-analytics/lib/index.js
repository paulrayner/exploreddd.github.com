'use strict';

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; })();

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hasHtmlPostfix = exports.addGoogleAnalytics = undefined;

exports.default = function (propertyId) {
  var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  var _ref$asyncScript = _ref.asyncScript;
  var asyncScript = _ref$asyncScript === undefined ? true : _ref$asyncScript;

  validateArgs(propertyId);
  return (0, _metalsmithEach2.default)(function (file, filename) {
    if (hasHtmlPostfix(filename)) file.contents = addGoogleAnalytics(file.contents, { propertyId: propertyId, asyncScript: asyncScript, filename: filename });
  });
};

var _metalsmithEach = require('metalsmith-each');

var _metalsmithEach2 = _interopRequireDefault(_metalsmithEach);

var _templates = require('./templates');

var _templates2 = _interopRequireDefault(_templates);

var _buffer = require('./buffer');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var addGoogleAnalytics = exports.addGoogleAnalytics = function addGoogleAnalytics(buffer, options) {
  var googleAnalytics = (0, _templates2.default)(options.propertyId, options.asyncScript);
  var index = (0, _buffer.bufferFindStringIndex)(buffer, '</head>');
  if (index === -1) throw Error('html file dosn\'t have an head end tag in ' + options.filename);

  var _splitBuffer = (0, _buffer.splitBuffer)(buffer, index);

  var _splitBuffer2 = _slicedToArray(_splitBuffer, 2);

  var start = _splitBuffer2[0];
  var end = _splitBuffer2[1];

  return (0, _buffer.concatBuffers)(start, googleAnalytics, end);
};

var validateArgs = function validateArgs(propertyId) {
  if (typeof propertyId === 'undefiend' || propertyId === null) throw new Error('google analytics: please provide a propertyId');
};

var hasHtmlPostfix = exports.hasHtmlPostfix = function hasHtmlPostfix(filename) {
  return new RegExp("\.html$").test(filename);
};
//# sourceMappingURL=index.js.map
